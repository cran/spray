// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// spray_maker
List spray_maker(const IntegerMatrix& M, const NumericVector& d);
RcppExport SEXP spray_spray_maker(SEXP MSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d(dSEXP);
    __result = Rcpp::wrap(spray_maker(M, d));
    return __result;
END_RCPP
}
// spray_add
List spray_add(const IntegerMatrix& M1, const NumericVector& d1, const IntegerMatrix& M2, const NumericVector& d2);
RcppExport SEXP spray_spray_add(SEXP M1SEXP, SEXP d1SEXP, SEXP M2SEXP, SEXP d2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M2(M2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d2(d2SEXP);
    __result = Rcpp::wrap(spray_add(M1, d1, M2, d2));
    return __result;
END_RCPP
}
// spray_mult
List spray_mult(const IntegerMatrix& M1, const NumericVector& d1, const IntegerMatrix& M2, const NumericVector& d2);
RcppExport SEXP spray_spray_mult(SEXP M1SEXP, SEXP d1SEXP, SEXP M2SEXP, SEXP d2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M2(M2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d2(d2SEXP);
    __result = Rcpp::wrap(spray_mult(M1, d1, M2, d2));
    return __result;
END_RCPP
}
// spray_crush
List spray_crush(const IntegerMatrix& M, const NumericVector& d);
RcppExport SEXP spray_spray_crush(SEXP MSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d(dSEXP);
    __result = Rcpp::wrap(spray_crush(M, d));
    return __result;
END_RCPP
}
// spray_overwrite
List spray_overwrite(const IntegerMatrix& M1, const NumericVector& d1, const IntegerMatrix& M2, const NumericVector& d2);
RcppExport SEXP spray_spray_overwrite(SEXP M1SEXP, SEXP d1SEXP, SEXP M2SEXP, SEXP d2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M2(M2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d2(d2SEXP);
    __result = Rcpp::wrap(spray_overwrite(M1, d1, M2, d2));
    return __result;
END_RCPP
}
// spray_accessor
NumericVector spray_accessor(const IntegerMatrix& M, const NumericVector& d, const IntegerMatrix& Mindex);
RcppExport SEXP spray_spray_accessor(SEXP MSEXP, SEXP dSEXP, SEXP MindexSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type Mindex(MindexSEXP);
    __result = Rcpp::wrap(spray_accessor(M, d, Mindex));
    return __result;
END_RCPP
}
// spray_setter
List spray_setter(const IntegerMatrix& M1, const NumericVector& d1, const IntegerMatrix& M2, const NumericVector& d2);
RcppExport SEXP spray_spray_setter(SEXP M1SEXP, SEXP d1SEXP, SEXP M2SEXP, SEXP d2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M2(M2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d2(d2SEXP);
    __result = Rcpp::wrap(spray_setter(M1, d1, M2, d2));
    return __result;
END_RCPP
}
// spray_equality
bool spray_equality(const IntegerMatrix& M1, const NumericVector& d1, const IntegerMatrix& M2, const NumericVector& d2);
RcppExport SEXP spray_spray_equality(SEXP M1SEXP, SEXP d1SEXP, SEXP M2SEXP, SEXP d2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M2(M2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d2(d2SEXP);
    __result = Rcpp::wrap(spray_equality(M1, d1, M2, d2));
    return __result;
END_RCPP
}
// spray_asum_include
List spray_asum_include(const IntegerMatrix& M, const NumericVector& d, const IntegerVector& n);
RcppExport SEXP spray_spray_asum_include(SEXP MSEXP, SEXP dSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    __result = Rcpp::wrap(spray_asum_include(M, d, n));
    return __result;
END_RCPP
}
// spray_asum_exclude
List spray_asum_exclude(const IntegerMatrix& M, const NumericVector& d, const IntegerVector& n);
RcppExport SEXP spray_spray_asum_exclude(SEXP MSEXP, SEXP dSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    __result = Rcpp::wrap(spray_asum_exclude(M, d, n));
    return __result;
END_RCPP
}
// spray_deriv
List spray_deriv(const IntegerMatrix& M, const NumericVector& d, const IntegerVector& n);
RcppExport SEXP spray_spray_deriv(SEXP MSEXP, SEXP dSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    __result = Rcpp::wrap(spray_deriv(M, d, n));
    return __result;
END_RCPP
}
